<style>
:root {
  --hammer: url("https://api.impactium.fun/ux/hammer-v3.svg");
  --hammer-accent: #F14C50;
  --cube: url("https://api.impactium.fun/ux/cube-v1.svg");
  --cube-accent: rgb(163, 255, 163);
  --shield: url("https://api.impactium.fun/ux/shield-v1.svg");
  --shield-accent: #417FFD;
  --sword: url("https://api.impactium.fun/ux/sword-v1.svg");
  --sword-accent: #F2DE4C;
  --event: url("https://api.impactium.fun/ux/party-v1.svg");
  --event-accent: #E465FD;
  --diamond: url("https://api.impactium.fun/ux/diamond-v2.svg");
  --diamond-accent: #72E4F2;
}
.profile {
  --flow-space: 0.5em;
  padding: 1.5em 2em !important;
  display: grid;
  grid-template-rows: auto auto auto 1fr;
  align-items: start;
  gap: 1.25em;
  min-width: 256px;
}

.dynamic {
  --hue: 275;
  --saturation: 82.26%;
  --lightness: 51.37%;
  --hsl: var(--hue), var(--saturation), var(--lightness);
}

.privileges {
  width: 100%;
  line-height: 1.4;
}

.privileges li::before {
  display: inline-block;
  transform: translateY(0.3ch);
  margin-right: 1ch;
}

.privileges hr {
  height: 4px;
  width: 100%;
  background: var(--c-48);
  border-radius: 2px;
  display: flex;
  border: none;
}
.privileges hr::after {
  content: "";
  min-width: 10%;
  width: 10%;
  border-radius: 2px;
}

.privileges li[--hammer]::before { content: var(--hammer) }
.privileges li[--hammer] hr::after { background-color: var(--hammer-accent) }

.privileges li[--cube]::before { content: var(--cube) }
.privileges li[--cube] hr::after { background-color: var(--cube-accent) }

.privileges li[--shield]::before { content: var(--shield) }
.privileges li[--shield] hr::after { background-color: var(--shield-accent) }

.privileges li[--sword]::before { content: var(--sword) }
.privileges li[--sword] hr::after { background-color: var(--sword-accent) }

.privileges li[--event]::before { content: var(--event) }
.privileges li[--event] hr::after { background-color: var(--event-accent) }

.privileges li[--diamond]::before { content: var(--diamond) }
.privileges li[--diamond] hr::after { background-color: var(--diamond-accent) }



.profile .header {
  font-size: 1.05em;
  font-weight: 600;
}
.profile .player {
  font-size: 1.75em;
  font-weight: 600;
  display: flex;
  gap: 8px;
  align-items: baseline;
}
.profile .player img {
  image-rendering: pixelated;
  height: 24px;
  width: 24px;
  image-rendering: optimizeSpeed;
  background: var(--c-48);
}
.profile .change_profile {
  width: 100%;
}

.privileges > * + * {
  margin-top: var(--flow-space, 1.25em);
}


.change_profile,
.default_panel_style input {
  display: block;
  align-self: end;
  margin: 1em 0 0.5em 0;
  text-align: center;
  text-decoration: none;
  color: #fff;
  background-color: #0d0d0d;
  padding: 0.7em;
  border-radius: 10px;
  font-size: 1rem;
  font-weight: 600;
  grid-row: -1;
}
.default_panel_style p {
  flex: 1;
}
.default_panel_style span {
  font-size: 12px;
}
.default_panel_style img {
  margin-right: 4px;
  height: 12px;
}
.overlay {
  height: fit-content;
  position: absolute;
  inset: 0;
  pointer-events: none;
  user-select: none;
  opacity: var(--opacity, 0);
  -webkit-mask: radial-gradient(
    25rem 25rem at var(--x) var(--y),
    #000 1%,
    transparent 50%
  );
  mask: radial-gradient(
    25rem 25rem at var(--x) var(--y),
    #000 1%,
    transparent 50%
  );
  transition: 400ms mask ease;
  will-change: mask;
}

.overlay .dynamic {
  background-color: hsla(var(--hsl), 0.15);
  border-color: hsla(var(--hsl), 1);
  box-shadow: 0 0 0 1px inset hsl(var(--hsl));
}

.overlay .change_profile {
  display: block;
  grid-row: -1;
  width: 100%;
  background-color: hsl(var(--hsl));
  box-shadow: 0 0 0 1px hsl(var(--hsl));
}

:not(.overlay) > .dynamic {
  transition: 400ms background ease;
  will-change: background;
}

:not(.overlay) > .dynamic:hover {
  --lightness: 95%;
  background: hsla(var(--hsl), 0.1);
}
.top_line {
  height: min-content;
  gap: 32px;
  width: 100%;
}
.controls {
  flex: 1;
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  grid-template-rows: repeat(3, 1fr);
  gap: 32px;
}
.overlay .controls .default_panel_style:nth-child(1) {
  --hue: 120
}
.overlay .controls .default_panel_style:nth-child(2) {
  --hue: 350
}
.overlay .controls {
  height: unset !important;
}
.default_panel_style {
  overflow: hidden;
  padding: 0.75em 1em;
  border-radius: 16px;
  color: #eceff1;
  background-color: #2b2b2b;
  border: 1px solid #eceff133;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
}
.default_panel_style input {
  text-align: left;
  padding: 0.44em;
  width: 100%;
  border: 1px solid #0d0d0d;
  flex: 1;
}
.default_button_style {
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
  text-align: left;
  border: 1px solid #0d0d0d;
  flex: 1;
  margin: 1em 0 0.5em 0;
  text-decoration: none;
  color: #fff;
  background-color: #0d0d0d;
  line-height: normal;
  padding: 0.44em;
  border-radius: 10px;
  font-size: 1rem;
  font-weight: 600;
  grid-row: -1;
}
.upload-button {
  padding: calc(0.7em - 6px) calc(2.8em - 6px);
  cursor: pointer;
}
.upload-button img {
  height: 24px;
  pointer-events: none;
}
.overlay .upload-button {
  width: fit-content;
}
.overlay .default_panel_style {
  display: flex;
  justify-content: end;
}
.overlay .save-button {
  position: relative;
  width: min-content;
}
#skinUploadOnErrorMessageContainer,
#nicknameUpdateOnErrorMessageContainer {
  color: var(--c-96);
  font-size: 12px;
  text-overflow: ellipsis;
  overflow: hidden;
  max-width: 100%;
  text-wrap: nowrap;
  transform: translateY(calc(0.5em + 50%));
}
.grayed {
  color: var(--c-96) !important;
}
.greyed {
  filter: brightness(0.55) !important;
}
</style>
<div class="top_line flex-dir-row">
  <div class="dynamic default_panel_style profile">
    <h2 class="header">Мой профиль</h2>

    <p class="player">
      <%- player.registered 
        ? `<img src="${player.skin?.iconLink}?timestamp=${Date.now() * Math.random(0, 100)}" onerror="this.src='https://api.impactium.fun/minecraftPlayersSkins/steve_icon.png'">`
        : ''
      %>

      <%= (player.registered && player.nickname) 
        ? player.nickname 
        : (player.registered 
          ? lang.playerHasNoNickname 
          : lang.playerNotRegisteredYet
        ) %>
    </p>

    <% if (player.registered) { %>
      <ul role="list" class="privileges">
        <li --hammer>Права<hr></li>
        <li --cube>Казуал I<hr></li>
        <li --shield>Воин I<hr></li>
        <li --sword>Убийца I<hr></li>
        <li --event>Рол-плей I<hr></li>
        <li --diamond>Донат I<hr></li>
      </ul>
    <% } %>

    <a class="change_profile" toOverlayView
    <%- player.registered 
      ? '>Изменить профиль' 
      :  onclick="registerPlayer()" >Зарегестрироваться %>
    </a>

  </div>
  <div class="controls calc_overlay">
    <!-- Панель для изменения никнейма -->
    <div class="default_panel_style dynamic">
      <div class="flex panel-header align-center">
        <p>Изменить никнейм</p>
  
        <!-- Таймер, если изменение никнейма заблокировано -->
        <% const isDisabledNicknameChange = Date.now() - player.nicknameLastChangeTimestamp < 60 * 60 * 1000 %>
        <%- isDisabledNicknameChange
          ? `<img src="https://api.impactium.fun/ux/timer.svg">
             <span id="nicknameTimer" timestamp="${player.nicknameLastChangeTimestamp}"></span>`
          : ''
        %>
      </div>
  
      <!-- Сообщение об ошибке при обновлении никнейма -->
      <p id="nicknameUpdateOnErrorMessageContainer"></p>
  
      <div class="flex panel-footer" style="gap: 8px;">
        <!-- Поле для ввода нового никнейма -->
        <input type="text" id="nicknameField" value="<%= player.nickname %>" placeholder="Введи ник" class="<%= isDisabledNicknameChange ? 'no-pointers grayed' : '' %>">
        
        <!-- Кнопка "Сохранить" для изменения никнейма -->
        <div onclick="updateNickname()" class="change_profile save-button <%= isDisabledNicknameChange ? 'no-pointers grayed' : '' %>" <%= isDisabledNicknameChange ? '' : 'toOverlayView' %>>Сохранить</div>
      </div>
    </div>
  
    <!-- Панель для изменения облика -->
    <div class="default_panel_style dynamic">
      <div class="flex panel-header align-center">
        <p>Изменить облик</p>
  
        <!-- Таймер, если изменение облика заблокировано -->
        <% const isDisabledSkinChange = Date.now() - player.lastSkinChangeTimestamp < 24 * 60 * 60 * 1000 %>
        <%- isDisabledSkinChange
          ? `<img src="https://api.impactium.fun/ux/timer.svg">
             <span id="skinTimer" timestamp="${player.lastSkinChangeTimestamp}"></span>`
          : ''
        %>
      </div>
  
      <!-- Сообщение об ошибке при загрузке облика -->
      <p id="skinUploadOnErrorMessageContainer"></p>
  
      <div class="flex panel-footer" style="gap: 8px;">
        <!-- Название текущего облика -->
        <p class="default_button_style <%= isDisabledSkinChange ? 'grayed' : '' %>" id="skinName"><%- player.skin?.originalTitle %></p>
        
        <!-- Кнопка "Загрузить" для изменения облика -->
        <input type="file" id="fileInput" style="display: none;">
        <label for="fileInput" onclick="handleFileUpload()" class="change_profile upload-button <%= isDisabledSkinChange ? 'no-pointers greyed' : '' %>" <%= isDisabledSkinChange ? '' : 'toOverlayView' %>>
          <img src="https://api.impactium.fun/ux/uploads.svg">
        </label>
      </div>
    </div>
  </div>  
</div>
<div class="overlay flex" style="gap: 32px;"></div>
<script>
function registerPlayer() {
  $.post("/me/minecraft/register")
    .done(function(response) {
      getRender('minecraft')
    })
}

function updateTimer() {
  const updateElementTimer = (element, maxTime, onTimerEnd) => {
    if (element) {
      const remainingTime = maxTime - (Date.now() - parseInt(element.attr('timestamp')));
      const minutes = Math.floor((remainingTime / 1000 / 60) % 60).toString().padStart(2, '0');
      const seconds = Math.floor((remainingTime / 1000) % 60).toString().padStart(2, '0');

      if (remainingTime > 0) {
        const hoursDisplay = Math.floor(remainingTime / (1000 * 60 * 60)).toString().padStart(2, '0');
        const timeString = `${hoursDisplay !== "00" ? hoursDisplay + ':' : ''}${minutes}:${seconds}`;
        element.text(timeString);
      } else {
        onTimerEnd(element);
      }
    }
  };

  const handleTimerEnd = (element) => {
    const topLine = element.parent();
    $('img', topLine).remove();
    $('span', topLine).remove();
    const parentBlock = topLine.parent();
    $('.panel-footer p', parentBlock).removeClass('grayed')
    $('.panel-footer label', parentBlock).removeClass('no-pointers greyed').attr('toOverlayView', '');
  };

  updateElementTimer($('#skinTimer'), 24 * 60 * 60 * 1000, handleTimerEnd);
  updateElementTimer($('#nicknameTimer'), 60 * 60 * 1000, handleTimerEnd);

  setTimeout(updateTimer, 1000);
}

updateTimer();
</script>