<style>
:root {
  --hammer: url("https://api.impactium.fun/ux/hammer.svg");
  --hammer-accent: #F14C50;
  --casual: url("https://api.impactium.fun/ux/casual.svg");
  --casual-accent: rgb(163, 255, 163);
  --defence: url("https://api.impactium.fun/ux/defence.svg");
  --defence-accent: #417FFD;
  --killer: url("https://api.impactium.fun/ux/killer.svg");
  --killer-accent: #F2DE4C;
  --event: url("https://api.impactium.fun/ux/event.svg");
  --event-accent: #E465FD;
  --donate: url("https://api.impactium.fun/ux/donate.svg");
  --donate-accent: #72E4F2;
}
.dynamic {
  --hue: 275;
  --saturation: 82.26%;
  --lightness: 51.37%;
  --hsl: var(--hue), var(--saturation), var(--lightness);
}

.profile {
  --flow-space: 0.5em;
  --hue: 240;
  padding: 1.5em 2em !important;
  display: grid;
  grid-template-rows: auto auto auto 1fr;
  align-items: start;
  gap: 1.25em;
  min-width: 256px;
}
.privileges {
  width: 100%;
  line-height: 1.4;
}
.profile ul {
  flex: 1;
}
.privileges li::before {
  display: inline-block;
  transform: translateY(0.3ch);
  margin-right: 1ch;
}

.privileges hr {
  height: 4px;
  width: 100%;
  margin-top: 2px;
  background: var(--c-48);
  border-radius: 2px;
  display: flex;
  border: none;
}
.privileges hr::after {
  content: "";
  min-width: 20px;
  border-radius: 2px;
}

.privileges li[--hammer]::before { content: var(--hammer) }
.privileges li[--hammer] hr::after { background-color: var(--hammer-accent) }

.privileges li[--casual]::before { content: var(--casual) }
.privileges li[--casual] hr::after { background-color: var(--casual-accent) }

.privileges li[--defence]::before { content: var(--defence) }
.privileges li[--defence] hr::after { background-color: var(--defence-accent) }

.privileges li[--killer]::before { content: var(--killer) }
.privileges li[--killer] hr::after { background-color: var(--killer-accent) }

.privileges li[--event]::before { content: var(--event) }
.privileges li[--event] hr::after { background-color: var(--event-accent) }

.privileges li[--donate]::before { content: var(--donate) }
.privileges li[--donate] hr::after { background-color: var(--donate-accent) }

.privileges li[--1] hr::after { width: 20%; }
.privileges li[--2] hr::after { width: 40%; }
.privileges li[--3] hr::after { width: 60%; }
.privileges li[--4] hr::after { width: 80%; }
.privileges li[--5] hr::after { width: 100%; }



.profile .header {
  font-size: 1.05em;
  font-weight: 600;
}
.profile .player {
  font-size: 1.75em;
  font-weight: 600;
  display: flex;
  gap: 8px;
  align-items: baseline;
}
.profile .player img {
  image-rendering: pixelated;
  height: 24px;
  width: 24px;
  image-rendering: optimizeSpeed;
  background: var(--c-48);
}
.profile .change_profile {
  width: 100%;
}

.privileges > * + * {
  margin-top: var(--flow-space, 1.25em);
}


.change_profile,
.default_panel_style input {
  display: block;
  cursor: pointer;
  align-self: end;
  margin: 1em 0 0.5em 0;
  text-align: center;
  text-decoration: none;
  color: #fff;
  background-color: #0d0d0d;
  padding: 0.7em;
  border-radius: 10px;
  font-size: 1rem;
  font-weight: 600;
  grid-row: -1;
}
.default_panel_style input {
  cursor: text;
}
.default_panel_style p {
  flex: 1;
}
.default_panel_style span {
  font-size: 12px;
}
.default_panel_style .panel-header > img {
  margin-right: 4px;
  height: 12px;
}
.overlay {
  flex-direction: column;
  height: fit-content;
  position: absolute;
  inset: 0;
  pointer-events: none;
  user-select: none;
  opacity: var(--opacity, 0);
  -webkit-mask: radial-gradient(
    25rem 25rem at var(--x) var(--y),
    #000 1%,
    transparent 50%
  );
  mask: radial-gradient(
    25rem 25rem at var(--x) var(--y),
    #000 1%,
    transparent 50%
  );
  transition: 400ms mask ease;
  will-change: mask;
}

.overlay .dynamic {
  background-color: hsla(var(--hsl), 0.15);
  border-color: hsla(var(--hsl), 1);
  box-shadow: 0 0 0 1px inset hsl(var(--hsl));
}

.overlay .change_profile {
  display: block;
  grid-row: -1;
  width: 100%;
  white-space: nowrap;
  background-color: hsl(var(--hsl));
  box-shadow: 0 0 0 1px hsl(var(--hsl));
}

:not(.overlay) > .dynamic {
  transition: 400ms background ease;
  will-change: background;
}

:not(.overlay) > .dynamic:hover {
  --lightness: 95%;
  background: hsla(var(--hsl), 0.1);
}
.top_line {
  height: min-content;
  gap: 32px;
  width: 100% !important;
}
.controls {
  flex: 1;
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  grid-template-rows: repeat(3, 1fr);
  gap: 32px;
}
.overlay .controls .default_panel_style:nth-child(1) {
  --hue: 120
}
.overlay .controls .default_panel_style:nth-child(2) {
  --hue: 350
}
.overlay .controls .default_panel_style:nth-child(3) {
  --hue: 35
}
.overlay .controls {
  height: unset !important;
}
.default_panel_style {
  position: relative;
  overflow: hidden;
  padding: 0.75em 1em;
  border-radius: 16px;
  color: #eceff1;
  background-color: #2b2b2b;
  border: 1px solid #eceff133;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
}
.default_panel_style input {
  text-align: left;
  padding: 0.44em;
  width: 100%;
  border: 1px solid #0d0d0d;
  flex: 1;
}
.default_button_style {
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
  text-align: left;
  border: 1px solid #0d0d0d;
  flex: 1;
  margin: 1em 0 0.5em 0;
  text-decoration: none;
  color: #fff;
  background-color: #0d0d0d;
  line-height: normal;
  padding: 0.44em;
  border-radius: 10px;
  font-size: 1rem;
  font-weight: 600;
  grid-row: -1;
}
.controls .default_panel_style.blocked::after {
  content: url(https://api.impactium.fun/ux/lock24p.svg);
  display: flex;
  top: 0;
  left: 0;
  position: absolute;
  height: 100%;
  width: 100%;
  backdrop-filter: blur(2px);
  background: #252525e3;
  align-items: center;
  justify-content: center;
}
.upload-button {
  padding: calc(0.7em - 6px) calc(2.8em - 6px);
  cursor: pointer;
}
.upload-button img {
  height: 24px;
  pointer-events: none;
}
@keyframes rotateAnimation {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}
.upload-button img.rotate {
  animation: rotateAnimation 2s linear infinite;
}
.overlay .upload-button {
  width: fit-content;
}
.overlay .default_panel_style {
  display: flex;
  justify-content: end;
}
.overlay .save-button {
  position: relative;
  width: min-content;
}
#skinUploadOnErrorMessageContainer,
#nicknameUpdateOnErrorMessageContainer {
  color: var(--c-96);
  font-size: 12px;
  text-overflow: ellipsis;
  overflow: hidden;
  max-width: 100%;
  text-wrap: nowrap;
  transform: translateY(calc(0.5em + 50%));
}
.grayed {
  color: var(--c-96) !important;
}
.greyed {
  filter: brightness(0.55) !important;
}
.profile p {
  flex: unset;
}
.achievements_module {
  --hue: 120;
  --saturation: 100%;
  --lightness: 82%;
  grid-row: 1 / 4;
  grid-column: 2 / 3;
  gap: 16px;
}
.selection_wrapper {
  gap: 8px;
  justify-content: flex-start;
  height: 32px;
}
.selection_wrapper > button {
  padding: 5px;
  cursor: pointer;
  border: 1px solid #0d0d0d;
  background-color: #0d0d0d;
  border-radius: 8px;
  transition: 0.4s all var(--trans);
}
.selection_wrapper > button > img {
  pointer-events: none;
}
.selection_wrapper > button.selected[--hammer] { border: 1px solid var(--hammer-accent) }
.selection_wrapper > button.selected[--casual] { border: 1px solid var(--casual-accent) }
.selection_wrapper > button.selected[--killer] { border: 1px solid var(--killer-accent) }
.selection_wrapper > button.selected[--defence] { border: 1px solid var(--defence-accent) }
.selection_wrapper > button.selected[--event] { border: 1px solid var(--event-accent) }
.selection_wrapper > button.selected[--donate] { border: 1px solid var(--donate-accent) }

.stages[--hammer] hr { background-color: var(--hammer-accent)}
.stages[--casual] hr { background-color: var(--casual-accent)}
.stages[--killer] hr { background-color: var(--killer-accent)}
.stages[--defence] hr { background-color: var(--defence-accent)}
.stages[--event] hr { background-color: var(--event-accent)}
.stages[--donate] hr { background-color: var(--donate-accent)}

.relative_panel {
  position: relative;
  flex: 1;
}
.relative_panel .stages {
  position: absolute;
  display: none;
  flex-direction: column;
  flex: 1;
  gap: 4px;
  width: -webkit-fill-available;
  height: -webkit-fill-available;
}
.relative_panel .stages line.bottom {
  height: 10px;
  position: absolute;
  width: calc(100% + 2em);
  bottom: -0.75em;
  background: var(--c-48);
  left: -1em;
}
.relative_panel .stages line.bottom hr {
  height: 100%;
  border: none;
}
.relative_panel .stages.selected {
  display: flex;
}
.stages .stage .icon {
  height: 32px;
  padding: 4px;
}
.stages.defence .stage .icon,
.stages.donate .stage .icon,
.stages.killer .stage .icon {
  image-rendering: pixelated;
}
.stages .stage > text {
  padding: 2px;
  width: -webkit-fill-available;
  max-width: calc(100% - 32px - 8px - 96px);
  gap: 2px;
  font-size: 14px;
}
.stages .stage > text p {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  width: calc(100% - 4px);
}
.stages .stage > text .grayed {
  color: var(--c-96);
}
.stages .stage > div {
  min-width: 96px;
  position: relative;
}
.stages .stage > div > span {
  white-space: nowrap;
  position: absolute;
  transform: translateY(60%);
  text-align: center;
  width: 100%;
}
.stages .stage > div line {
  width: 100%;
  background-color: var(--c-48);
  height: 4px;
  border-radius: 2px;
}
.stages .stage > div line hr {
  height: 4px;
  width: 41.6%;
  border-radius: 2px;
  border: none;
}
.stages .stage .percentage {
  width: 64px;
  text-align: center;
}
.stages .embed {
  border: none;
  height: 1px;
  background-color: var(--c-48) !important;
}
.stages .embed:first-child {
  background-color: transparent !important;
}
.achievements_module[achievement="hammer"] { --hue: 359; --saturation: 85%; --lightness: 62%; }
.achievements_module[achievement="casual"] { --hue: 120; --saturation: 100%; --lightness: 82%; }
.achievements_module[achievement="killer"] { --hue: 58; --saturation: 100%; --lightness: 61%; }
.achievements_module[achievement="defence"] { --hue: 220; --saturation: 98%; --lightness: 62%; }
.achievements_module[achievement="event"] { --hue: 290; --saturation: 97%; --lightness: 69%; }
.achievements_module[achievement="donate"] { --hue: 187; --saturation: 83%; --lightness: 70%; }

.selection_wrapper > div {
  display: none;
}
.selection_wrapper > div.loader.active {
  display: flex;
}
.selection_wrapper > div.loader.active > img {
  animation: rotate 2s linear infinite;
}

@keyframes rotate {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}
.overlay .middle_line {
  height: unset !important;
  width: unset !important;
}
@media (max-width: 767px) {
  .app {
    flex-direction: column;
  }
  .panel {
    flex-direction: column;
  }
  .liner {
    flex-direction: column;
  }
  .controls {
    grid-template-columns: repeat(1, 1fr);
    grid-template-rows: repeat(1, 1fr);
  }
  .achievements_module {
    grid-row: 4 / 16;
    grid-column: 1 / 2;
  }

}
</style>
<div class="top_line flex-dir-row liner">
  <%- include(`${lang.debugPath}/views/personal/elements/playerCredentials.ejs`, { player, lang }) %>
  <div class="controls calc_overlay">
    <!-- Панель для изменения никнейма -->
    <%- include(`${lang.debugPath}/views/personal/elements/setNickname.ejs`, { player, lang }) %>
    
    <!-- Панель для изменения облика -->
    <%- include(`${lang.debugPath}/views/personal/elements/setSkin.ejs`, { player, lang }) %>
    
    <!-- Панель для изменения пароля -->
    <%- include(`${lang.debugPath}/views/personal/elements/setPassword.ejs`, { player, lang }) %>
    
    <!-- Панель для изменения пароля -->
    <%- include(`${lang.debugPath}/views/personal/elements/achievementsModule.ejs`, { player, lang }) %>
  </div>  
</div>
<div class="middle_line flex-dir-row liner">
  <%- include(`${lang.debugPath}/views/personal/elements/serverInfo.ejs`, { player, lang }) %>
</div>
<div class="overlay flex" style="gap: 32px;">
</div>
<script>
function registerPlayer() {
  $.post("/me/minecraft/register")
    .done(function(response) {
      getRender('minecraft')
    })
}

function updateTimer() {
  const updateElementTimer = (element, maxTime, onTimerEnd) => {
    if (element) {
      const remainingTime = maxTime - (Date.now() - parseInt(element.attr('timestamp')));
      const minutes = Math.floor((remainingTime / 1000 / 60) % 60).toString().padStart(2, '0');
      const seconds = Math.floor((remainingTime / 1000) % 60).toString().padStart(2, '0');

      if (remainingTime > 0) {
        const hoursDisplay = Math.floor(remainingTime / (1000 * 60 * 60)).toString().padStart(2, '0');
        const timeString = `${hoursDisplay !== "00" ? hoursDisplay + ':' : ''}${minutes}:${seconds}`;
        element.text(timeString);
      } else {
        onTimerEnd(element);
      }
    }
  };

  const handleTimerEnd = (element) => {
  };

  updateElementTimer($('#skinTimer'), 24 * 60 * 60 * 1000, handleTimerEnd);
  updateElementTimer($('#nicknameTimer'), 60 * 60 * 1000, handleTimerEnd);

  setTimeout(updateTimer, 1000);
}

updateTimer();

function achievementSelection(caller) {
  const allButtons = $('.selection_wrapper button');
  allButtons.each(function() {
    $(this).removeClass('selected');
  });

  const buttonInitiator = $(caller);
  buttonInitiator.addClass('selected');
  $(`.overlay .selection_wrapper button.${buttonInitiator.attr('--achievement')}`).addClass('selected');

  displayAchievementPanel(buttonInitiator.attr('--achievement'));
}
function displayAchievementPanel(achievementToCall) {
  const allPanels = $('.achievements_module .stages')
  allPanels.each(function() {
    $(this).removeClass('selected');
  });

  const blockToDisplay = $(`.achievements_module .stages.${achievementToCall}`);
  if (blockToDisplay) {
    blockToDisplay.addClass('selected')
  }
  const p = $('.achievements_module');
  p.attr('achievement', achievementToCall);
}
function onloadAchievementsFetcher() {
  if ($('.achievements_module').hasClass('blocked')) return;
  $('.selection_wrapper > div').addClass('active');
  const lastFetch = parseInt($('.achievements_module').attr('processed'), 10);

  if ((Date.now() - lastFetch) < 1000 * 60 * 10) return $('.selection_wrapper > div').removeClass('active')

  $.ajax({
    url: "/me/minecraft/getAchievements",
    type: "GET",
    contentType: 'application/json',
    success: function(data, textStatus, jqXHR) {
      handleAchievementsResult(jqXHR.responseText);
    },
    error: function(jqXHR, textStatus, errorThrown) {
      handleAchievementsResult(jqXHR.responseText);
    }
  });
}

function handleAchievementsResult(html) {
  const selectedButton = $('.selection_wrapper button.selected').attr("--achievement");
  $('.achievements_module').replaceWith(html);
  achievementSelection(document.querySelector(`.selection_wrapper button.${selectedButton}`));
}
onloadAchievementsFetcher();
</script>