<style>
:root {
  --hammer: url("https://api.impactium.fun/ux/hammer-v3.svg");
  --hammer-accent: #F14C50;
  --casual: url("https://api.impactium.fun/ux/cube-v1.svg");
  --casual-accent: rgb(163, 255, 163);
  --shield: url("https://api.impactium.fun/ux/shield-v1.svg");
  --shield-accent: #417FFD;
  --sword: url("https://api.impactium.fun/ux/sword-v1.svg");
  --sword-accent: #F2DE4C;
  --event: url("https://api.impactium.fun/ux/party-v1.svg");
  --event-accent: #E465FD;
  --diamond: url("https://api.impactium.fun/ux/diamond-v2.svg");
  --diamond-accent: #72E4F2;
}
.profile {
  --flow-space: 0.5em;
  padding: 1.5em 2em !important;
  display: grid;
  grid-template-rows: auto auto auto 1fr;
  align-items: start;
  gap: 1.25em;
  min-width: 256px;
}
.profile .change_profile {
  cursor: pointer;
}
.dynamic {
  --hue: 275;
  --saturation: 82.26%;
  --lightness: 51.37%;
  --hsl: var(--hue), var(--saturation), var(--lightness);
}

.privileges {
  width: 100%;
  line-height: 1.4;
}
.profile ul {
  flex: 1;
}
.privileges li::before {
  display: inline-block;
  transform: translateY(0.3ch);
  margin-right: 1ch;
}

.privileges hr {
  height: 4px;
  width: 100%;
  background: var(--c-48);
  border-radius: 2px;
  display: flex;
  border: none;
}
.privileges hr::after {
  content: "";
  min-width: 10%;
  width: 10%;
  border-radius: 2px;
}

.privileges li[--hammer]::before { content: var(--hammer) }
.privileges li[--hammer] hr::after { background-color: var(--hammer-accent) }

.privileges li[--casual]::before { content: var(--casual) }
.privileges li[--casual] hr::after { background-color: var(--casual-accent) }

.privileges li[--shield]::before { content: var(--shield) }
.privileges li[--shield] hr::after { background-color: var(--shield-accent) }

.privileges li[--sword]::before { content: var(--sword) }
.privileges li[--sword] hr::after { background-color: var(--sword-accent) }

.privileges li[--event]::before { content: var(--event) }
.privileges li[--event] hr::after { background-color: var(--event-accent) }

.privileges li[--diamond]::before { content: var(--diamond) }
.privileges li[--diamond] hr::after { background-color: var(--diamond-accent) }



.profile .header {
  font-size: 1.05em;
  font-weight: 600;
}
.profile .player {
  font-size: 1.75em;
  font-weight: 600;
  display: flex;
  gap: 8px;
  align-items: baseline;
}
.profile .player img {
  image-rendering: pixelated;
  height: 24px;
  width: 24px;
  image-rendering: optimizeSpeed;
  background: var(--c-48);
}
.profile .change_profile {
  width: 100%;
}

.privileges > * + * {
  margin-top: var(--flow-space, 1.25em);
}


.change_profile,
.default_panel_style input {
  display: block;
  align-self: end;
  margin: 1em 0 0.5em 0;
  text-align: center;
  text-decoration: none;
  color: #fff;
  background-color: #0d0d0d;
  padding: 0.7em;
  border-radius: 10px;
  font-size: 1rem;
  font-weight: 600;
  grid-row: -1;
}
.default_panel_style p {
  flex: 1;
}
.default_panel_style span {
  font-size: 12px;
}
.default_panel_style img {
  margin-right: 4px;
  height: 12px;
}
.overlay {
  height: fit-content;
  position: absolute;
  inset: 0;
  pointer-events: none;
  user-select: none;
  opacity: var(--opacity, 0);
  -webkit-mask: radial-gradient(
    25rem 25rem at var(--x) var(--y),
    #000 1%,
    transparent 50%
  );
  mask: radial-gradient(
    25rem 25rem at var(--x) var(--y),
    #000 1%,
    transparent 50%
  );
  transition: 400ms mask ease;
  will-change: mask;
}

.overlay .dynamic {
  background-color: hsla(var(--hsl), 0.15);
  border-color: hsla(var(--hsl), 1);
  box-shadow: 0 0 0 1px inset hsl(var(--hsl));
}

.overlay .change_profile {
  display: block;
  grid-row: -1;
  width: 100%;
  background-color: hsl(var(--hsl));
  box-shadow: 0 0 0 1px hsl(var(--hsl));
}

:not(.overlay) > .dynamic {
  transition: 400ms background ease;
  will-change: background;
}

:not(.overlay) > .dynamic:hover {
  --lightness: 95%;
  background: hsla(var(--hsl), 0.1);
}
.top_line {
  height: min-content;
  gap: 32px;
  width: 100%;
}
.controls {
  flex: 1;
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  grid-template-rows: repeat(3, 1fr);
  gap: 32px;
}
.overlay .controls .default_panel_style:nth-child(1) {
  --hue: 120
}
.overlay .controls .default_panel_style:nth-child(2) {
  --hue: 350
}
.overlay .controls .default_panel_style:nth-child(3) {
  --hue: 35
}
.overlay .controls {
  height: unset !important;
}
.default_panel_style {
  position: relative;
  overflow: hidden;
  padding: 0.75em 1em;
  border-radius: 16px;
  color: #eceff1;
  background-color: #2b2b2b;
  border: 1px solid #eceff133;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
}
.default_panel_style input {
  text-align: left;
  padding: 0.44em;
  width: 100%;
  border: 1px solid #0d0d0d;
  flex: 1;
}
.default_button_style {
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
  text-align: left;
  border: 1px solid #0d0d0d;
  flex: 1;
  margin: 1em 0 0.5em 0;
  text-decoration: none;
  color: #fff;
  background-color: #0d0d0d;
  line-height: normal;
  padding: 0.44em;
  border-radius: 10px;
  font-size: 1rem;
  font-weight: 600;
  grid-row: -1;
}
.controls .default_panel_style.blocked::after {
  content: url(https://api.impactium.fun/ux/lock24p.svg);
  display: flex;
  top: 0;
  left: 0;
  position: absolute;
  height: 100%;
  width: 100%;
  backdrop-filter: blur(2px);
  background: #252525e3;
  align-items: center;
  justify-content: center;
}
.upload-button {
  padding: calc(0.7em - 6px) calc(2.8em - 6px);
  cursor: pointer;
}
.upload-button img {
  height: 24px;
  pointer-events: none;
}
@keyframes rotateAnimation {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}
.upload-button img.rotate {
  animation: rotateAnimation 2s linear infinite;
}
.overlay .upload-button {
  width: fit-content;
}
.overlay .default_panel_style {
  display: flex;
  justify-content: end;
}
.overlay .save-button {
  position: relative;
  width: min-content;
}
#skinUploadOnErrorMessageContainer,
#nicknameUpdateOnErrorMessageContainer {
  color: var(--c-96);
  font-size: 12px;
  text-overflow: ellipsis;
  overflow: hidden;
  max-width: 100%;
  text-wrap: nowrap;
  transform: translateY(calc(0.5em + 50%));
}
.grayed {
  color: var(--c-96) !important;
}
.greyed {
  filter: brightness(0.55) !important;
}
.profile p {
  flex: unset;
}
</style>
<div class="top_line flex-dir-row">
  <%- include(`${lang.debugPath}/views/personal/elements/playerCredentials.ejs`, { player, lang }) %>
  <div class="controls calc_overlay">
    <!-- Панель для изменения никнейма -->
    <%- include(`${lang.debugPath}/views/personal/elements/nicknameChanger.ejs`, { player, lang }) %>
    
    <!-- Панель для изменения облика -->
    <%- include(`${lang.debugPath}/views/personal/elements/skinChanger.ejs`, { player, lang }) %>
    
    <!-- Панель для изменения пароля -->
    <%- include(`${lang.debugPath}/views/personal/elements/passwordChanger.ejs`, { player, lang }) %>
  </div>  
</div>
<div class="overlay flex" style="gap: 32px;"></div>
<script>
function registerPlayer() {
  $.post("/me/minecraft/register")
    .done(function(response) {
      getRender('minecraft')
    })
}

function updateTimer() {
  const updateElementTimer = (element, maxTime, onTimerEnd) => {
    if (element) {
      const remainingTime = maxTime - (Date.now() - parseInt(element.attr('timestamp')));
      const minutes = Math.floor((remainingTime / 1000 / 60) % 60).toString().padStart(2, '0');
      const seconds = Math.floor((remainingTime / 1000) % 60).toString().padStart(2, '0');

      if (remainingTime > 0) {
        const hoursDisplay = Math.floor(remainingTime / (1000 * 60 * 60)).toString().padStart(2, '0');
        const timeString = `${hoursDisplay !== "00" ? hoursDisplay + ':' : ''}${minutes}:${seconds}`;
        element.text(timeString);
      } else {
        onTimerEnd(element);
      }
    }
  };

  const handleTimerEnd = (element) => {
  };

  updateElementTimer($('#skinTimer'), 24 * 60 * 60 * 1000, handleTimerEnd);
  updateElementTimer($('#nicknameTimer'), 60 * 60 * 1000, handleTimerEnd);

  setTimeout(updateTimer, 1000);
}

updateTimer();
</script>