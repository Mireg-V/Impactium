<style>
header {
  padding: 0 15vw;
  width: 100vw;
}
@media (max-width: 767px) {
header {
  padding: 16px;
}
}
header-background {
  top: 0 !important;
}
main {
  align-items: center;
}
.app {
  padding-top: 3vh;
  display: flex;
  width: calc(100vw - 64px);
  max-width: 1344px;
  height: calc(100vh - 80px);
  gap: 32px;
}
.app nav {
  display: flex;
  flex-direction: column;
  gap: 8px;
  align-items: center;
}

@media (max-width: 767px) {
.app nav {
  align-items: flex-start;
}
}
.app nav button {
  background: var(--c-36);
  padding: 8px;
  min-height: 32px;
  min-width: 192px;
  gap: 8px;
  border-radius: 12px;
  display: flex;
  align-items: center;
}
.app nav button:hover {
  background: var(--c-48);
}
.app nav button.selected {
  background: var(--c-48);
}
.app nav button p {
  flex: 1;
  text-align: left;
}
.panel {
  position: relative;
  display: flex;
  flex-direction: column;
  flex: 1;
  justify-content: flex-start;
  gap: 32px;
  width: 100%;
}
@media (max-width: 1080px) {
  header {
    padding: 0 32px;
  }
  .app {
    flex-direction: column;
  }
  .app nav {
    align-items: flex-start;
  }
}
#messageWrapper {
  display: flex;
  flex-direction: column;
  position: absolute;
  bottom: 16px;
  gap: 14px;
  right: 16px;
}
@keyframes message-animation {
  0% {
    transform: translateX(calc(100% + 16px));
  }

  100% {
    transform: translateX(0px);
  }
}
#messageWrapper div {
  padding: 0.75em 1em;
  padding-top: calc(0.75em - 6px);
  font-size: 16px;
  font-weight: 600;
  max-width: calc(15vw - 32px);
  border-radius: 16px;
  transition: opacity 0.5s var(--trans);
  animation: message-animation 0.5s var(--trans) forwards;
}
#messageWrapper div p {
  line-height: 24px;
}
#messageWrapper div p::before {
  transform: translateY(6px);
  display: inline-block;
  margin-right: 6px;
  height: 24px;
}


#messageWrapper div[type="success"] {
  background: #d2fbd0;
  border: 1px solid #0d5f07;
}
#messageWrapper div[type="success"] p {
  color: #0d5f07;
}
#messageWrapper div[type="success"] p::before {
  content: url("https://api.impactium.fun/ux/circle-check.svg");
}


#messageWrapper div[type="warning"] {
  background: #fbf8d0;
  border: 1px solid #5f5907;
}
#messageWrapper div[type="warning"] p {
  color: #5f5907;
}
#messageWrapper div[type="warning"] p::before {
  content: url("https://api.impactium.fun/ux/circle-minus.svg");
}


#messageWrapper div[type="attention"] {
  background: #fbd0d0;
  border: 1px solid #5f0707;
}
#messageWrapper div[type="attention"] p {
  color: #5f0707;
}
#messageWrapper div[type="attention"] p::before {
  content: url("https://api.impactium.fun/ux/circle-xmark.svg");
}
#messageWrapper div.toHide {
  opacity: 0;
}
</style>
<script>
</script>
<div class="app">
  <nav>
    <button class="selected">
      <img src="https://api.impactium.fun/ux/casual.svg">
      <p>Minecraft Account</p>
    </button>
  </nav>
  <div class="panel">
    <% if (typeof prerender === 'undefined') prerender = 'minecraft'; %>
    <% if (typeof user === 'undefined') user = player; %>
    <%- include(`${lang.debugPath}/views/personal/${prerender}.ejs`, { user, lang }) %>
    
  </div>
  <div class="none" id="copiedMessage" text="<%= lang.copiedMessage %>"></div>
  <div id="messageWrapper">
  </div>
</div>

<script>

let panel
let liners
let overlay
const initCards = () => {
  observer.disconnect();
  updateSelectors();
  const cards = Array.from(document.querySelectorAll(".dynamic"));

  liners.forEach(line => {
    const lineDuplicate = document.createElement("div");
    lineDuplicate.classList.add(...line.classList);

    const parentCalcOverlay = line.querySelector(".calc_overlay");
    if (parentCalcOverlay) {
      const calcOverlay = document.createElement("div");
      calcOverlay.classList.add(...parentCalcOverlay.classList);
      line.querySelectorAll('.dynamic').forEach(parentCard => {
        const card = createCard(parentCard);
        const conteiner = parentCard.closest('.calc_overlay')
        if (conteiner) {
          calcOverlay.appendChild(card);
        } else {
          lineDuplicate.appendChild(card);
        }
      });
      lineDuplicate.appendChild(calcOverlay);
    } else {
      line.querySelectorAll('.dynamic').forEach(parentCard => {
        const card = createCard(parentCard);
        lineDuplicate.appendChild(card);
      });
    }

    overlay.appendChild(lineDuplicate);
  });

  cards.forEach(cardElement => {
    observer.observe(cardElement);
  });
  if (window.matchMedia("(max-width: 768px)").matches) {
    window.addEventListener("scroll", applyOverlayMaskOnCenter);
  } else {
    document.body.addEventListener("pointermove", applyOverlayMask);
  }
};
const createCard = (cardElement) => {
  const overlayCard = document.createElement("div");
  overlayCard.classList.add(...cardElement.classList);
  const toOverlayViewElement = cardElement.querySelector('[toOverlayView]');
  if (toOverlayViewElement) createOverlayCta(overlayCard, toOverlayViewElement);
  return overlayCard
};
function updateSelectors() {
  panel = document.querySelector(".panel");
  liners = document.querySelectorAll(".liner");
  overlay = document.querySelector(".overlay");
}
const createOverlayCta = (overlayCard, buttonEl) => {
  const overlayCta = buttonEl.cloneNode(true);
  const imgElements = buttonEl.querySelectorAll('img');
  
  overlayCta.setAttribute("aria-hidden", true);
  overlayCard.appendChild(overlayCta);
};
const observer = new ResizeObserver((entries) => {
  entries.forEach((entry) => {
    const cardElement = entry.target;
    const cardClasses = Array.from(cardElement.classList).join('.');

    let width = entry.borderBoxSize[0].inlineSize;
    let height = entry.borderBoxSize[0].blockSize;
    const overlayCards =  overlay.querySelectorAll(`.${cardClasses}`);
    overlayCards.forEach((overlayCard) => {
      overlayCard.style.width = `${width}px`;
      overlayCard.style.height = `${height}px`;
    });
  });
});
const applyOverlayMaskOnCenter = (e) => {
  const x = window.innerWidth * 0.5 + window.scrollX;
  const y = window.innerHeight * 0.5 + window.scrollY;
  
  overlay.style.setProperty("--opacity", "1");
  overlay.style.setProperty("--x", `${x}px`);
  overlay.style.setProperty("--y", `${y}px`);
};
const applyOverlayMask = (e) => {
  const overlayEl = e.currentTarget;
  const x = e.pageX - panel.offsetLeft;
  const y = e.pageY - panel.offsetTop;
  overlayEl.style = `--opacity: 1; --x: ${x}px; --y:${y}px;`;
};
initCards();

function getRender(page) {
  $.ajax({
    type: 'GET',
    url: "/me/minecraft/" + page,
    headers: {
      'Cache-Control': 'no-store',
      'Accept': 'panel'
    },
    success: function (response) {
      const renderZone = $(`.app .panel > .${page}`);
      renderZone.html("");
      renderZone.html(response);
      $('.overlay').empty();
      initCards()
    },
    error: function (error) {
    }
  });
}

function togglerSkinButtonWaiter(isWait) {
  const image = $('label.upload-button img');
  if (isWait) {
    image.attr('src', 'https://api.impactium.fun/ux/loader24p.svg');
    image.addClass('rotate');
  } else {
    image.attr('src', 'https://api.impactium.fun/ux/uploads.svg');
    image.removeClass('rotate');
  }
}

function ajax(block) {
  const destination = $(block).attr('link');
  let data, contentType, type;

  if (destination === 'setNickname') {
    data = JSON.stringify({ newNickname: $('#nicknameField').val() });
    type = "POST";
    contentType = "application/json";
  } else if (destination === 'setSkin') {
    const fileInput = $(block)[0];
    const file = fileInput.files[0];

    if (!file) return;

    data = new FormData();
    type = "POST";
    contentType = false;
    data.append("skin", file, file.name);
    togglerSkinButtonWaiter(true);
  } else if (destination === 'setPassword') {
    data = JSON.stringify({ newPassword: $('#passwordField').val() });
    type = "POST";
    contentType = "application/json";
  }

  $.ajax({
    url: `/me/minecraft/${destination}`,
    type: type,
    data: data,
    contentType: contentType,
    processData: false,
    success: function (data, textStatus, jqXHR) {
      newMessage(jqXHR.status, jqXHR.responseText);
      console.log(data, textStatus, jqXHR)
      getRender(destination);
      if (destination === 'setSkin') {
        $(block).val("");
      }
    },
    error: function (jqXHR, textStatus, errorThrown) {
      newMessage(jqXHR.status, jqXHR.responseText);
      getRender(destination);
    },
    complete: function() {
      if (destination === 'setSkin') {
        togglerSkinButtonWaiter(false);
      }
    }
  });
}


function newMessage(code, text) {
  const type = code < 400 ? 'success' : (code >= 400 && code < 500 ? 'warning' : 'attention');
  const message = $('<div></div>', {
    'type': type
  });
  message.append(`<p>${text}</p>`);
  $('#messageWrapper').append(message);
  setTimeout(() => {
    message.addClass('toHide')
    setTimeout(() => {
      message.remove();
    }, 500);
  }, 5000);
}

async function copy(block) {
  const copiedMessage = $('#copiedMessage').attr('text');
  const text = $(block).attr('toCopy');
  try {
    await navigator.clipboard.writeText(text);
  } catch (err) {
    const textarea = document.createElement('textarea');
    textarea.value = text;
    document.body.appendChild(textarea);
    textarea.select();
    document.execCommand('copy');
    document.body.removeChild(textarea);
  } finally {
    newMessage(200, `"${text}" ${copiedMessage}`)
  }
}

</script>