<style>
header {
  padding: 0 15vw
}
.app {
  padding: 3vh 15vw 0 15vw;
  display: flex;
  height: calc(100vh - 80px);
  gap: 32px;
}
.app nav {
  display: flex;
  flex-direction: column;
  gap: 8px;
  align-items: center
}

.app nav button {
  background: var(--c-36);
  padding: 8px;
  min-height: 32px;
  min-width: 192px;
  gap: 8px;
  border-radius: 12px;
  display: flex;
  align-items: center;
}
.app nav button:hover {
  background: var(--c-48);
}
.app nav button.selected {
  background: var(--c-48);
}
.app nav button p {
  flex: 1;
  text-align: left;
}
.panel {
  position: relative;
  display: flex;
  flex-direction: row;
  flex: 1;
  justify-content: space-between;
}
</style>
<div class="app">
  <nav>
    <button class="selected" >
      <img src="">
      <p>My Profile</p>
    </button>
    <button onclick="getRender(`minecraft`)">
      <img src="https://api.impactium.fun/ux/cube.svg">
      <p>Minecraft Account</p>
    </button>
    <button>
      <img src="">
      <p>Settings</p>
    </button>
  </nav>
  <div class="panel">
    <% if (typeof prerender === 'undefined') prerender = 'minecraftBody'; %>
    <% if (typeof user === 'undefined') user = player; %>
    <%- include(`${lang.debugPath}/views/personal/${prerender}.ejs`, { user, lang }) %>
    
  </div>
</div>

<script>
$('.app nav button').on('click', function () {
  $('.app nav button.previous').removeClass('previous');
  $('.app nav button.selected').addClass('previous');
  $('.app nav button.selected').removeClass('selected');
  $(this).addClass('selected');
});

function getRender(page) {
  $.ajax({
    type: 'GET',
    url: "/me/" + page,
    headers: {
      'Cache-Control': 'no-store',
      'Accept': 'semipage'
    },
    success: function (response) {
      const renderZone = $(".app .panel");
      history.pushState(null, null, `/me/${page}`);
      renderZone.html("");
      renderZone.html(response);
      initCards()
    },
    error: function (error) {
      const buttonOnError = $('.app nav button.previous')
      $(buttonOnError).removeClass('previous');
      $('.app nav button.selected').removeClass('selected');
      $(buttonOnError).addClass('selected');
    }
  });
}

const initCards = () => {
  cardsContainer = document.querySelector(".panel");
  cards = Array.from(document.querySelectorAll(".dynamic"));
  overlay = document.querySelector(".overlay");
  cards.forEach(initOverlayCard);
  document.body.addEventListener("pointermove", applyOverlayMask);
};

let cardsContainer = document.querySelector(".panel");
let cards = Array.from(document.querySelectorAll(".profile"));
let overlay = document.querySelector(".overlay");

const applyOverlayMask = (e) => {
  const overlayEl = e.currentTarget;
  const x = e.pageX - cardsContainer.offsetLeft;
  const y = e.pageY - cardsContainer.offsetTop;

  overlayEl.style = `--opacity: 1; --x: ${x}px; --y:${y}px;`;
};

const createOverlayCta = (overlayCard, buttonEl) => {
  const overlayCta = document.createElement("div");
  buttonEl.classList.forEach((className) => {
    overlayCta.classList.add(className);
  });
  overlayCta.textContent = buttonEl.textContent;
  overlayCta.setAttribute("aria-hidden", true);
  overlayCard.append(overlayCta);
};

const observer = new ResizeObserver((entries) => {
  entries.forEach((entry) => {
    const cardIndex = cards.indexOf(entry.target);
    let width = entry.borderBoxSize[0].inlineSize;
    let height = entry.borderBoxSize[0].blockSize;

    if (cardIndex >= 0) {
      overlay.children[cardIndex].style.width = `${width}px`;
      overlay.children[cardIndex].style.height = `${height}px`;
    }
  });
});

const initOverlayCard = (cardEl) => {
  const overlayCard = document.createElement("div");
  cardEl.classList.forEach((className) => {
    overlayCard.classList.add(className);
  });
  const toOverlayViewElement = cardEl.querySelector('[toOverlayView]');
  if (toOverlayViewElement) createOverlayCta(overlayCard, toOverlayViewElement);
  overlay.append(overlayCard);
  observer.observe(cardEl);
};

initCards()

</script>