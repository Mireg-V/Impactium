<style>
header {
  padding: 0 15vw;
  width: 100vw;
}
main {
  align-items: center;
}
.app {
  padding-top: 3vh;
  display: flex;
  width: 70vw;
  min-width: 1344px;
  height: calc(100vh - 80px);
  gap: 32px;
}
.app nav {
  display: flex;
  flex-direction: column;
  gap: 8px;
  align-items: center
}

.app nav button {
  background: var(--c-36);
  padding: 8px;
  min-height: 32px;
  min-width: 192px;
  gap: 8px;
  border-radius: 12px;
  display: flex;
  align-items: center;
}
.app nav button:hover {
  background: var(--c-48);
}
.app nav button.selected {
  background: var(--c-48);
}
.app nav button p {
  flex: 1;
  text-align: left;
}
.panel {
  position: relative;
  display: flex;
  flex-direction: column;
  flex: 1;
  justify-content: flex-start;
  gap: 32px;
  width: 100%;
}
</style>
<script>
function getRender(page) {
  $.ajax({
    type: 'GET',
    url: "/me/" + page,
    headers: {
      'Cache-Control': 'no-store',
      'Accept': 'semipage'
    },
    success: function (response) {
      const renderZone = $(".app .panel");
      history.pushState(null, null, `/me/${page}`);
      renderZone.html("");
      renderZone.html(response);
      // initCards()
    },
    error: function (error) {
      const buttonOnError = $('.app nav button.previous')
      $(buttonOnError).removeClass('previous');
      $('.app nav button.selected').removeClass('selected');
      $(buttonOnError).addClass('selected');
    }
  });
}
</script>
<div class="app">
  <nav>
    <button class="selected" onclick="getRender(`minecraft`)">
      <img src="https://api.impactium.fun/ux/casual.svg">
      <p>Minecraft Account</p>
    </button>
  </nav>
  <div class="panel">
    <% if (typeof prerender === 'undefined') prerender = 'minecraftBody'; %>
    <% if (typeof user === 'undefined') user = player; %>
    <%- include(`${lang.debugPath}/views/personal/${prerender}.ejs`, { user, lang }) %>
    
  </div>
</div>

<script>
$('.app nav button').on('click', function () {
  $('.app nav button.previous').removeClass('previous');
  $('.app nav button.selected').addClass('previous');
  $('.app nav button.selected').removeClass('selected');
  $(this).addClass('selected');
});

let panel
let liners
let cards
let overlay
let calcOverlay
let calcOverlayMap = new Map();
const initCards = () => {
  updateSelectors();

  liners.forEach(line => {
    const lineDuplicate = document.createElement("div");
    lineDuplicate.classList.add(...line.classList);

    const parentCalcOverlay = line.querySelector(".calc_overlay");
    if (parentCalcOverlay) {
      const calcOverlay = document.createElement("div");
      calcOverlay.classList.add(...parentCalcOverlay.classList);
      line.querySelectorAll('.dynamic').forEach(parentCard => {
        const card = createCard(parentCard);
        const conteiner = parentCard.closest('.calc_overlay')
        if (conteiner) {
          calcOverlay.appendChild(card);
        } else {
          lineDuplicate.appendChild(card);
        }
      });
      lineDuplicate.appendChild(calcOverlay);
    } else {
      line.querySelectorAll('.dynamic').forEach(parentCard => {
        const card = createCard(parentCard);
        lineDuplicate.appendChild(card);
      });
    }

    overlay.appendChild(lineDuplicate);
  });

  cards.forEach(cardElement => {
    observer.observe(cardElement);
  });

  document.body.addEventListener("pointermove", applyOverlayMask);
};

const createCard = (cardElement) => {
  const overlayCard = document.createElement("div");
  overlayCard.classList.add(...cardElement.classList);
  const toOverlayViewElement = cardElement.querySelector('[toOverlayView]');
  if (toOverlayViewElement) createOverlayCta(overlayCard, toOverlayViewElement);
  return overlayCard
};

function updateSelectors() {
  panel = document.querySelector(".panel");
  liners = document.querySelectorAll(".liner");
  cards = Array.from(document.querySelectorAll(".dynamic"));
  overlay = document.querySelector(".overlay");
  calcOverlay = document.querySelectorAll(".calc_overlay");
  calcOverlayMap = new Map();
}
const createOverlayCta = (overlayCard, buttonEl) => {
  const overlayCta = document.createElement("div");
  buttonEl.classList.forEach((className) => {
    overlayCta.classList.add(className);
  });
  overlayCta.textContent = buttonEl.textContent;
  overlayCta.setAttribute("aria-hidden", true);

  const imgElements = buttonEl.querySelectorAll('img');
  imgElements.forEach((imgElement) => {
    const clonedImg = imgElement.cloneNode(true);
    const imgWrapper = document.createElement('div');
    imgWrapper.appendChild(clonedImg);
    overlayCta.appendChild(imgWrapper);
  });

  overlayCard.append(overlayCta);
};

const observer = new ResizeObserver((entries) => {
  entries.forEach((entry) => {
    const cardIndex = cards.indexOf(entry.target);
    let width = entry.borderBoxSize[0].inlineSize;
    let height = entry.borderBoxSize[0].blockSize;

    if (cardIndex >= 0 && overlay.children[cardIndex]) {
      overlay.children[cardIndex].style.width = `${width}px`;
      overlay.children[cardIndex].style.height = `${height}px`;
    }
  });
});

const applyOverlayMask = (e) => {
  const overlayEl = e.currentTarget;
  const x = e.pageX - panel.offsetLeft;
  const y = e.pageY - panel.offsetTop;

  overlayEl.style = `--opacity: 1; --x: ${x}px; --y:${y}px;`;
};

initCards();

function handleFileUpload() {
  console.log('вызывлся')
  const fileInput = $("#fileInput");
  const file = fileInput[0].files[0];
    console.log(fileInput) 
    console.log(fileInput[0]) 
    console.log(fileInput[0].files)
    console.log(fileInput[0].files[0])

  if (file) {
    const formData = new FormData();
    formData.append("skin", file, file.name);
    togglerSkinButtonWaiter(true)
    $.ajax({
      url: "https://impactium.fun/me/minecraft/setSkin",
      type: "POST",
      data: formData,
      processData: false,
      contentType: false,
      success: function (data, textStatus, jqXHR) {
        handleResult(jqXHR.status, jqXHR.responseText);

        fileInput.val("");
      },
      error: function (jqXHR, textStatus, errorThrown) {
        handleResult(jqXHR.status, jqXHR.responseText);
      },
    });
  }
}

function togglerSkinButtonWaiter(isWait) {
  const image = $('label.upload-button img');
  if (isWait) {
    image.attr('src', 'https://api.impactium.fun/ux/loader24p.svg');
    image.addClass('rotate');
  } else {
    image.attr('src', 'https://api.impactium.fun/ux/uploads.svg');
    image.removeClass('rotate');
    return
  }

  setTimeout(() => {
    setSkinSetterWarning('Something went wrong.')
    togglerSkinButtonWaiter(false)
  }, 2000);
}

function handleResult(status, message) {
  console.log('овтет')
  switch (status) {
    case 410:
      setSkinSetterWarning(message)
      break;
    case 411:
      setSkinSetterWarning(message)
      break;
    case 414:
      setSkinSetterWarning(message)
      break;
    case 412:
      setNicknameSetterWarning(message)
      break;
    case 413:
      setNicknameSetterWarning(message)
      break;
    case 415:
      setNicknameSetterWarning(message)
      break;
    case 416:
      setNicknameSetterWarning(message)
      break;
    default:
      setTimeout(getRender('minecraft'), 500);
      break;
  }
}

function setSkinSetterWarning(message) {
  const skinUploadOnErrorMessageContainer = $('#skinUploadOnErrorMessageContainer')
  skinUploadOnErrorMessageContainer.text(message)
}
function setNicknameSetterWarning(message) {
  const nicknameUpdateOnErrorMessageContainer = $('#nicknameUpdateOnErrorMessageContainer')
  nicknameUpdateOnErrorMessageContainer.text(message)
}

function updateNickname() {
  const nickname = $('#nicknameField').val();
  const requestData = JSON.stringify({ newNickname: nickname });

  $.ajax({
    url: "https://impactium.fun/me/minecraft/setNickname",
    type: "POST",
    data: requestData,
    contentType: 'application/json',
    success: function(data, textStatus, jqXHR) {
      handleResult(jqXHR.status, jqXHR.responseText);
    },
    error: function(jqXHR, textStatus, errorThrown) {
      handleResult(jqXHR.status, jqXHR.responseText);
    }
  });
}

function updatePassword() {
  const password = $('#passwordField').val();
  const requestData = JSON.stringify({ newPassword: password });

  $.ajax({
    url: "https://impactium.fun/me/minecraft/setPassword",
    type: "POST",
    data: requestData,
    contentType: 'application/json',
    success: function(data, textStatus, jqXHR) {
      handleResult(jqXHR.status, jqXHR.responseText);
    },
    error: function(jqXHR, textStatus, errorThrown) {
      handleResult(jqXHR.status, jqXHR.responseText);
    }
  });
}

</script>