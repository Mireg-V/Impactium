<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="shortcut icon" href="https://impactium.fun/static/img/impa.svg" type="image/x-icon">
  <title>Impactium Shop</title>
  <link rel="stylesheet" href="https://impactium.fun/static/style/reset.css">
  <link rel="stylesheet" href="https://impactium.fun/static/style/style_global.css?v=5">
  <script src="https://impactium.fun/static/script/jquery.js"></script>
</head>
<style>
@import url('https://fonts.googleapis.com/css2?family=Monoton&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Lato:ital,wght@0,100;0,300;0,400;0,700;0,900;1,100;1,300;1,400;1,700;1,900&display=swap');
:root {
  --background-color: #2b2822;
  --background-gradient: #1F2937;
  --grey: #1F2937;
  --grey-hovered: #374151;
  --grey-hovered-opacity: #37415180;
  --dark-blue: #111827;
  --dark-blue-opacity: #11182790;
  --white: #e8e8e8;
  --black: #212121;
  --purple: #3E3979;
  --light-purple: #8F80F4;
  --backdrop-background: rgba(255, 255, 255, 0.074);
  --backdrop-border: rgba(255, 255, 255, 0.222);
  --gap-small: 5px;
  --gap-standart: 10px;
  --gap-big: 15px;
  --gap-biggest: 20px;
  --padding-small: 5px;
  --padding-standart: 10px;
  --padding-big: 15px;
}
* {
  font-family: 'Lato', sans-serif;
}
input[type="text"]:focus {
  outline: none;
}
body {
  max-width: 100vw;
  min-height: 100vh;
  display: flex;
  overflow-x: hidden;
  align-items: center;
  flex-direction: column;
  padding: 0 10vw;
  background: #161616;
}
header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  width: calc(100vw - 6vw);
  background: var(--white);
  height: 80px;
  padding: 0 3vw;
}
header .logo {
  gap: var(--gap-small);
}
header .logo img {
  height: 45px;
}
header .cart {
  padding: 5px;
  gap: var(--gap-small);
  border: 1px solid var(--background-color);
  border-radius: 30px;
  padding: var(--padding-standart);
  height: 20px;
  width: 80px;
  transition: all 0.3s cubic-bezier(.21,.29,0,.94);
}

header .cart p {
  font-family: 'Manrope', sans-serif;
  overflow: hidden;
  transition: all 0.3s cubic-bezier(.21,.29,0,.94);
  width: 100%;
  white-space: nowrap;
}
header .cart img {
  height: 20px;
}
header .cart.active p {
  width: 0px;
}
header .cart.active {
  gap: 0px;
}
main {
  display: flex;
  flex-direction: column;
  flex: 1;
  min-height: calc(100vh - 80px);
  width: 100vw;
}
store-grid {
  padding: 0 15px;
  display: flex;
  flex-wrap: wrap;
  gap: 10px;
  justify-content: space-between;
  align-items: stretch;
}

@media (max-width: 767px) {
  store-grid {
    grid-template-columns: repeat(2, 1fr);
  }
}

filters {
  margin: 10px 15px;
  height: 40px;
  justify-content: space-between;
}
filters .button-that-opens-filter-choose-menu {
  height: 40px;
  padding: 10px;
  outline: none;
  background-color: rgba(255, 255, 255, 0.074);
  border: 1px solid rgba(255, 255, 255, 0.222);
  border-radius: 20px;
}
filters .button-that-opens-filter-choose-menu img {
  height: 20px;
}
filters .button-that-opens-filter-choose-menu span {
  margin-bottom: 5px;
  height: 100%;
  color: var(--white);
  font-size: 16px;
  margin-right: 5px;
}
filters form {
  height: 40px;
  display: flex;
}
filters form * {
  padding: 0;
  margin: 0;
  border: none;
  background: none;
  color: var(--white);
}
filters .search {
  height: 40px;
  background: var(--white);
  color: var(--black);
  border-radius: 20px 0 0 20px;
  padding: 0 10px;
}
filters .submit {
  border-radius: 0 20px 20px 0;
  height: 40px;
  background: var(--black);
  color: var(--white);
  padding: 0 5px;
  border: 1px solid rgba(255, 255, 255, 0.222);
}
filters .submit img {
  height: 20px;
  margin-right: 10px;
  margin-left: 5px;
}
item {
  width: calc(50% - 20px);
  background-color: rgba(255, 255, 255, 0.074);
  border: 1px solid rgba(255, 255, 255, 0.222);
  border-radius: 15px;
  padding: 5px;
  display: flex;
  justify-content: space-between;
  align-items: center;
  flex-direction: column;
  box-shadow: inset 0px 0px 0px 0px #000000;
  transition: all 0.3s cubic-bezier(.21,.29,0,.94);
  position: relative;
  flex-grow: 1;
}
@media (min-width: 769px) {
  item {
    width: calc(25% - 20px);
  }
}
@media (min-width: 1200px) {
  item {
    width: calc(100% / 6 - 21px);
  }
}
item.selected {
  box-shadow: inset 0px 0px 20px 0px #34b53421;
  border: 1px solid #34b534;
}
item * {
  color: var(--white);
}
item .image-wrapper {
  width: 100%;
  position: relative;
}
.product-image {
  width: 100%;
  border-radius: 10px 10px 0 0;
}
item .nav {
  padding-top: 5px;
  gap: 5px;
  width: calc(100% - 0px);
  border-radius: 0 0 10px 10px;
  height: 100%;
  justify-content: space-between;
}
item .nav .name {
  width: calc(100% - 10px);
  text-align: left;
  font-weight: 600;
  text-shadow: 0px 1px 2px var(--black);
  color: var(--white);
  font-size: 16px;
  line-height: 20px;
  height: 100%;
  display: flex;
  align-items: center;
  padding: 0 5px;
}
item .nav .price {
  width: 100%;
  display: flex;
  justify-content: space-between;
  align-items: flex-end;
}
item .amount-on-choose {
  height: 30px;
  width: 30px;
  background: #161616;
  color: var(--white);
  font-weight: 600;
  text-align: center;
  border-radius: 100%;
  position: absolute;
  top: 5px;
  right: 5px;
  opacity: 0;
  transition: all 0.3s cubic-bezier(.21,.29,0,.94);
}
item .amount-on-choose.active {
  opacity: 1;
}
holder {
  position: fixed;
  z-index: 1;
  height: 100vh;
  width: 100vw;
  top: 0;
  left: 0;
  background: #00000080;
  opacity: 0;
  pointer-events: none;
  transition: all 0.3s cubic-bezier(.21,.29,0,.94);
}
holder.active {
  opacity: 1;
  pointer-events: all;
}
item .nav .price .old {
  text-decoration: line-through;
  color: #5d5d5d;
}
item .nav .price .new {
  font-weight: 600;
  border-bottom-left-radius: 10px;
  border-top-right-radius: 10px;
  padding: 5px;
  background-color: rgba(255, 255, 255, 0.074);
  border: 1px solid rgba(255, 255, 255, 0.222);
}
item .nav .price .sale {
  font-weight: 600;
  border-top-left-radius: 10px;
  border-bottom-right-radius: 10px;
  padding: 5px;
  background-color: rgba(255, 255, 255, 0.074);
  border: 1px solid rgba(255, 255, 255, 0.222);
}
.switch-panel {
  padding: 10px;
  width: calc(100vw - 20px);
  height: calc(75vw + 10px);
  position: fixed;
  bottom: 0;
  background: var(--white);
  border-radius: 30px 30px 0 0;
  transform: translateX(-50%) translateY(100%);
  transition: all 0.3s cubic-bezier(.21,.29,0,.94);
  z-index: 2;
  left: 50%;
  max-width: 590px;
  max-height: 450px;
}
.switch-panel.active {
  transform: translateY(0%) translateX(-50%);
}
barInfo {
  height: calc(100% - 25px);
  display: grid;
  grid-template-rows: repeat(6, 1fr);
  grid-template-columns: repeat(8, 1fr);
  grid-gap: 10px;
}
.switch-panel h2 {
  width: 100%;
  font-weight: 600;
  height: 15px;
  margin-bottom: 10px;
}
barInfo .image-wrapper {
  border: 1px solid #161616;
  border-radius: 20px;
  overflow: hidden;
  grid-column: 1 / 4;
  grid-row: 1 / 3;
}
barInfo .image-wrapper img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}
barInfo .name {
  grid-column: 4 / 9;
  grid-row: 1 / 1;
  font-weight: 500;
  width: 100%;
  text-align: left;
}

barInfo button.apply {
  grid-column: 2 / 8;
  grid-row: 6 / 7;
  background: var(--black);
  color: var(--white);
  font-weight: 600;
  border: none;
  border-radius: 50px;
  transform: translateY(calc(100% + 20px));
  transition: all 0.3s cubic-bezier(.21,.29,0,.94);
}
barInfo button.apply.active {
  transform: translateY(0);
}

barInfo div.size-chooser {
  grid-column: 1 / 7;
  grid-row: 4 / 5;
  display: flex;
  flex-direction: row;
  align-items: center;
  gap: 10px;
}
barInfo div.size-chooser span {
  width: calc((100% - 60px ) / 6);
  border-radius: 100%;
  height: calc(100% - 2px);
  border: 1px solid var(--black);
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.3s cubic-bezier(.21,.29,0,.94);
}
barInfo div.size-chooser span.selected {
  background: var(--black);
  color: var(--white);
  font-weight: 600;
}
barInfo div.color-chooser {
  grid-column: 1 / 9;
  grid-row: 5 / 6;
  display: flex;
  flex-direction: row;
  align-items: center;
  gap: 10px;
}
barInfo div.color-chooser span {
  width: calc(((100% - 70px) / 8) - 2px);
  border-radius: 100%;
  height: calc(100% - 2px);
  border: 1px solid transparent;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.3s cubic-bezier(.21,.29,0,.94);
}
barInfo div.color-chooser span.selected {
  border: 1px solid var(--black);
}

barInfo div.amount-chooser {
  border: 1px solid var(--black);
  grid-column: 7 / 9;
  grid-row: 4 / 5;
  border-radius: 50px;
  display: flex;
  justify-content: space-between;
  align-items: center;
}
barInfo div.amount-chooser .amount-image-wrapper {
  height: 100%;
  width: calc(100% / 3);
  padding: 5px;
}
barInfo div.amount-chooser .amount-image-wrapper img {
  transition: all 0.3s cubic-bezier(.21,.29,0,.94);
}
barInfo div.amount-chooser .amount-image-wrapper img.ignore {
  filter: brightness(5);
}
barInfo div.amount-chooser span {
  font-weight: 500;
  font-size: 18px;
  margin-bottom: 2px;
}
#amountMinus,
#amountPlus {
  height: 20px;
}
#amountMinus {
  transform: rotateZ(180deg);
}
cart {
  display: flex;
  flex-direction: column;
}
cart .cart-list {
  display: flex;
  flex-direction: column;
  gap: 5px;
  flex: 1;
  overflow-x: hidden;
  overflow-y: scroll;
}
cart position {
  border: 1px solid var(--black);
  border-radius: 10px;
  padding: 5px;
  display: flex;
  align-items: center;
  justify-content: space-between;
  height: 70px;
  width: calc(100% - 12px);
  gap: 5px;
}
cart position .posiiton-image-wrapper {
  height: 62px;
  width: 62px;
  border: 1px solid var(--black);
  border-radius: 5px;
  padding: 3px;
}
cart position .posiiton-image-wrapper img {
  width: 100%;
  height: 100%;
  object-fit: contain;
}
cart .close-image-wrapper {
  height: 100%;
  width: 20px;
  margin-right: 10px;
}
cart .close-image-wrapper img {
  width: 100%;
}
position * {
  color: var(--black);
}
position .name {
  font-weight: 700;
}
position .bubble {
  white-space: nowrap;
  height: calc(100% - 2px);
  width: calc(100% - 2px);
  border-radius: 100%;
  border: 1px solid var(--black);
  font-size: 12px;
  display: flex;
  justify-content: center;
  align-items: center;
}
position .info-grid {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  grid-template-rows: repeat(2, 1fr);
  overflow: hidden;
  width: 70px;
  height: 100%;
  grid-gap: 5px;
}
position .info-grid .color-circle {
  border-radius: 100%;
  border: 1px solid var(--black);
}
position .info-flex {
  grid-gap: 5px;
  justify-content: space-evenly;
}
position .right-wrapper {
  height: 100%;
  gap: 10px;
}
position .size {
  grid-row: 1 / 1;
  grid-column: 1 / 1;
}
position .amount {
  grid-row: 1 / 1;
  grid-column: 2 / 2;
}
position .color-name {
  grid-row: 2 / 2;
  grid-column: 2 / 2;
}
cart .ship {
  width: calc(100% / 8 * 6);
  background: var(--black);
  color: var(--white);
  font-weight: 600;
  border: none;
  flex-direction: row;
  height: calc(100% / 6 - 12px);
  position: relative;
  left: 50%;
  transform: translateX(-50%);
  border-radius: 100px;
}
cart .info {
  width: calc(100% / 8 * 6);
  margin: 5px 0;
  position: relative;
  left: 50%;
  transform: translateX(-50%);
  display: flex;
  align-items: center;
  justify-content: flex-end;
  gap: 10px;
}
cart .info .items-amount {
  border-radius: 5px;
  padding: 5px;
  border: 1px solid var(--black);
  font-weight: 600;
}
cart .info .items-cost {
  border-radius: 5px;
  padding: 5px;
  background: var(--black);
  border: 1px solid var(--black);
  color: var(--white);
  font-weight: 600;
}
</style>
<!-- 
TODO List:
 • Голова должна быть с блюром
 • Анимация чисел amount
 • 
-->
<body>
  <header> <!-- Голова (верная статическая часть) -->
    <div class="logo flex-dir-row center">
      <img src="https://impactium.fun/static/img/impa-black.svg">
    </div>
    <div id="openCartButton" class="cart flex-dir-row center" onclick="openCart()">
      <img src="https://www.svgrepo.com/show/533044/cart-shopping-fast.svg">
      <p>Кошик</p>
    </div>
  </header>
  <main>
    <filters class="flex-dir-row center-v"> <!-- Фильтры по товарам -->
      <button class="button-that-opens-filter-choose-menu center">
        <span>Сортування</span>
        <img src="https://impactium.fun/static/img/svg/filter.svg">
      </button>
      <form>
        <input type="text" placeholder="Пошук..." class="search">
        <button class="submit center">
          <img src="https://impactium.fun/static/img/svg/search.svg">
        </button>
      </form>
    </filters>

    <store-grid> <!-- Генеративная сетка -->
      <% for (const category of Object.keys(products)) { %>
        <% products[category].forEach(function(product, index) { %>
          <item itemId="<%= product.id %>" onclick="openItemSelectionPanel(<%= product.id %>)">
            <div class="image-wrapper center">
              <img class="product-image" src="https://api.impactium.fun/static/img/shop/<%= product.id %>.png">
            </div>
            <div class="nav center flex-dir-column" style="background: <%= product.accentColor %>;">
              <p class="name"><%= product.name %></p>
              <div class="price">
                <span class="new"><%= product.price.toFixed(2) %> ₴</span>
                <span class="sale"><%= product.weight %>г.</span>
              </div>
            </div>
            <span class="amount-on-choose center"></span>
          </item>
        <% }); %>
      <% } %>
    </store-grid>
    <bar class="switch-panel">
      <h2 class="center">Інформація про товар</h2>
      <barInfo>
        <div class="image-wrapper center">
          <img id="barItemImage" src="">
        </div>
        <p class="name center-v" id="barItemName"></p>
        <div class="size-chooser" id="barItemSize"></div>
        <div class="color-chooser" id="barItemColor"></div>
        <div class="amount-chooser" id="barItemAmount">
          <div class="amount-image-wrapper center" onclick="amountChange(false)">
            <img id="amountMinus" src="static/img/svg/arrow-1.svg" class="ignore">
          </div>
          <span>1</span>
          <div class="amount-image-wrapper center" onclick="amountChange(true)">
            <img id="amountPlus" src="static/img/svg/arrow-1.svg">
          </div>
        </div>
        <button class="apply" onclick="add2cart()">
          <p>Добавить в корзину</p>
        </button>
      </barInfo>
    </bar>
    <cart class="switch-panel" id="cartPanel">
      <h2 class="center">Мій кошик</h2>
      <div class="cart-list" id="cartList">
      </div>
      <div class="info">
        <span id="cartItemsAmount" class="items-amount">0</span>
        <span id="cartItemsCost" class="items-cost">0.00 ₴</span>
      </div>
      <button id="ship" class="ship center">
        <p>Замовити дзвінок для <spon>підтвердження</spon></p>
        <img src="">
      </button>
    </cart>
    <holder onclick="closeHolder()"></holder>
  </main>
  <footer>
    
  </footer>
</body>
</html>
<script>
const products = JSON.parse('<%- JSON.stringify(products) %>');
const bar = document.querySelector('bar');
const apply2cart = document.querySelector('barInfo button.apply');
const holder = document.querySelector('holder');
const arrowIconMinus = document.getElementById('amountMinus');
const arrowIconPlus = document.getElementById('amountPlus');
const sizeChooser = document.getElementById('barItemSize');

let cart = [];

function openItemSelectionPanel(itemId) {
  let item = null;
  for (const category in products) {
    console.log(products[category]);
    let itemIdPar = parseInt(itemId);
    if (typeof itemIdPar === 'number') {
      console.log(itemIdPar);
    }

    item = products[category].find(item => item.id === itemIdPar);
    if (item) { break };
  }
  console.log(item);
  const itemIcon = document.getElementById('barItemImage');
  const itemName = document.getElementById('barItemName');
  const itemSize = document.getElementById('barItemSize');
  const itemColor = document.getElementById('barItemColor');
  const itemAmount = document.getElementById('barItemAmount');
  
  itemIcon.onload = function () {
    bar.classList.add('active');
    holder.classList.add('active');
  };

  itemSize.innerHTML = '';
  itemColor.innerHTML = '';
  itemAmount.querySelector('span').textContent = 1;

/*  item.characteristics.size.forEach(function (size) {
    const span = document.createElement('span');
    span.textContent = size;
    span.onclick = function () {
        sizeSelect(size, this);
    };
    itemSize.appendChild(span);
  });

  item.characteristics.color.forEach(function (color) {
    const span = document.createElement('span');
    span.style.background = color.hexCode;
    span.setAttribute('name', color.name);
    span.onclick = function () {
        colorSelect(color, this);
    };
    itemColor.appendChild(span);
  });*/

  apply2cart.setAttribute('itemId', item.id);
  itemIcon.src = `https://api.impactium.fun/static/img/shop/${item.id}.png`;
  itemName.textContent = `${item.name}`;
}

function closeHolder() {
  bar.classList.remove('active');
  holder.classList.remove('active');
  cartPanel.classList.remove('active');
  openCartButton.classList.remove('active');

  const spans = sizeChooser.querySelectorAll('span');
  spans.forEach(function (span) {
    span.classList.remove('selected');
  });
  toggleApplyButtonState();
  apply2cart.setAttribute('itemId', 'none');
}

function activateCartButton() {
  apply2cart.classList.add('active');
}
function disactivateCartButton() {
  apply2cart.classList.remove('active');
  arrowIconMinus.classList.add('ignore');
  arrowIconPlus.classList.remove('ignore');
}

class CartItem {
  constructor(id, name, size, amount, price, colorName, colorNex, image, randomId) {
    this.id = id;
    this.name = name;
    this.size = size;
    this.amount = amount;
    this.price = price;
    this.colorName = colorName;
    this.colorNex = colorNex;
    this.image = image;
    this.randomId = randomId;
  }
}

function add2cart() {
  const itemId = apply2cart.getAttribute('itemId');
  const productInBase = products.find(item => item.id === parseInt(itemId));
  const size = document.querySelector('barInfo .size-chooser span.selected').textContent;
  const amount = document.querySelector('barInfo .amount-chooser span').textContent;
  const selectedColorName = document.querySelector('barInfo .color-chooser span.selected').getAttribute('name');
  const selectedColorHex = productInBase.characteristics.color.find(color => color.name === selectedColorName).hexCode;
  const image = document.getElementById('barItemImage').getAttribute('src');
  const randomId = getRandomIdentifier();
  const cartItem = new CartItem(itemId,
                      productInBase.name,
                      size, parseInt(amount),
                      productInBase.price,
                      selectedColorName,
                      selectedColorHex,
                      image,
                      randomId
                    );

  cart.push(cartItem);
  cartCreateNewBlock(cartItem);
  closeHolder();
  console.log(cartItem);
  itemPanelChangeState(itemId);
}

function amountChange(isPlus) {
  const itemAmount = document.getElementById('barItemAmount');
  const amount = itemAmount.querySelector('span');

  let currentAmount = parseInt(amount.textContent);

  if (isPlus) {
    if (currentAmount < 10) {
      currentAmount += 1;
    }
  } else {
    if (currentAmount > 1) {
      currentAmount -= 1;
    }
  }

  if (currentAmount === 1) {
    arrowIconMinus.classList.add('ignore');
  } else if (currentAmount === 10) {
    arrowIconPlus.classList.add('ignore');
  } else {
    arrowIconMinus.classList.remove('ignore');
    arrowIconPlus.classList.remove('ignore');
  }
  amount.textContent = currentAmount;
}

function itemPanelChangeState(itemId) {
  const itemPanel = document.querySelector(`item[itemId="${itemId}"]`);
  itemPanel.classList.add('selected');

  const amountCircle = itemPanel.querySelector('.amount-on-choose');

  const filteredItems = cart.filter(item => item.id === itemId);

  const totalAmount = filteredItems.reduce((accumulator, currentItem) => {
    return accumulator + currentItem.amount;
  }, 0);

  amountCircle.textContent = totalAmount;
  amountCircle.classList.add('active');
}

function colorSelect(color) {
  const itemColor = document.getElementById('barItemColor');
  const colors = itemColor.querySelectorAll('span');

  colors.forEach(function (colorBlock) {
    if (colorBlock.getAttribute('name') === color.name) {
      colorBlock.style.boxShadow = `0 0 5px 2px ${color.hexCode}`;
      colorBlock.classList.add('selected');
    } else {
      colorBlock.style.boxShadow = 'unset';
      colorBlock.classList.remove('selected');
    }
  });
  toggleApplyButtonState();
}

function sizeSelect(size, block) {
  const itemSize = document.getElementById('barItemSize');
  const sizes = itemSize.querySelectorAll('span');
  const hasSelectedClass = block.classList.contains('selected');

  sizes.forEach(function (sizeBlock) {
    sizeBlock.classList.remove('selected');
  });

  if (hasSelectedClass) {
    block.classList.remove('selected');
  } else {
    block.classList.add('selected');
  }
  toggleApplyButtonState();
}

const cartPanel = document.getElementById('cartPanel');
const cartList = document.getElementById('cartList');
const openCartButton = document.getElementById('openCartButton');

function openCart() {
  cartPanel.classList.add('active');
  holder.classList.add('active');
  openCartButton.classList.add('active');
}

function cartCreateNewBlock(cartItem) {
  // Создаем основной контейнер блока
  const position = document.createElement('position');
  position.classList.add('flex-dir-row');
  position.style.gap = '5px';
  position.onclick = function () {
    removeFromCart(this);
  };
  position.setAttribute('randomId', cartItem.randomId);

  // Создаем контейнер с изображением товара
  const imageWrapper = document.createElement('div');
  imageWrapper.classList.add('posiiton-image-wrapper');
  const image = document.createElement('img');
  image.src = cartItem.image;
  imageWrapper.appendChild(image);

  // Создаем контейнер с информацией о товаре
  const infoFlex = document.createElement('div');
  infoFlex.classList.add('info-flex', 'flex-dir-column');
  const name = document.createElement('span');
  name.classList.add('name');
  name.textContent = cartItem.name;
  const color = document.createElement('span');
  color.classList.add('color');
  color.textContent = `Цвет: ${cartItem.colorName}`;
  const amount = document.createElement('span');
  amount.classList.add('amount');
  amount.textContent = `Кол-во: ${cartItem.amount} шт.`;
  infoFlex.appendChild(name);
  infoFlex.appendChild(color);
  infoFlex.appendChild(amount);

  const rightBlock = document.createElement('div');
  rightBlock.classList.add('flex-dir-row', 'center-v', 'right-wrapper');

  const infoGrid = document.createElement('div');
  infoGrid.classList.add('info-grid');
  const sizeBubble = document.createElement('span');
  sizeBubble.classList.add('size', 'bubble');
  sizeBubble.textContent = cartItem.size;
  const colorCircle = document.createElement('span');
  colorCircle.classList.add('color-circle');
  colorCircle.style.backgroundColor = cartItem.colorNex;
  infoGrid.appendChild(sizeBubble);
  infoGrid.appendChild(colorCircle);

  // Создаем контейнер с кнопкой закрытия
  const closeImageWrapper = document.createElement('div');
  closeImageWrapper.classList.add('close-image-wrapper', 'center');
  const closeImage = document.createElement('img');
  closeImage.src = 'static/img/svg/close.svg';
  closeImageWrapper.appendChild(closeImage);


  rightBlock.appendChild(infoGrid);
  rightBlock.appendChild(closeImageWrapper);

  position.appendChild(imageWrapper);
  position.appendChild(infoFlex);
  position.appendChild(rightBlock);

  // Добавляем основной контейнер в cartList
  cartList.appendChild(position);
}

function removeFromCart(block) {
  const removableId = block.getAttribute('randomId');
  const indexToRemove = cart.findIndex(item => item.randomId === removableId);

  if (indexToRemove !== -1) {
    const removedItem = cart.splice(indexToRemove, 1)[0];

    const hasOtherItemsWithSameId = cart.some(item => item.id === removedItem.id);
    const itemId = removedItem.id;
    const itemPanel = document.querySelector(`item[itemId="${itemId}"]`);
    const amountCircle = itemPanel.querySelector('.amount-on-choose');

    if (!hasOtherItemsWithSameId) {
      itemPanel.classList.remove('selected');
      amountCircle.classList.remove('active');
      amountCircle.textContent = '';
    } else {
      const amountDownScale = parseInt(removedItem.amount);
      const parsedAmountCircle = parseInt(amountCircle.textContent);
      amountCircle.textContent = parsedAmountCircle - amountDownScale;
    }
  }

  block.remove();
}


function getRandomIdentifier() {
  const randomId = Math.random().toString(36).substring(2, 34);
  const possibleIndex = cart.findIndex(item => item.randomId === randomId);

  if (possibleIndex !== -1) {
    getRandomIdentifier()
  } else {
    return randomId;
  }
}

function toggleApplyButtonState() {
  const itemColor = document.getElementById('barItemColor');
  const itemSize = document.getElementById('barItemSize');

  const hasSelectedColor = itemColor.querySelectorAll('span.selected').length > 0;
  const hasSelectedSize = itemSize.querySelectorAll('span.selected').length > 0;

  if (hasSelectedColor && hasSelectedSize) {
    activateCartButton()
  } else {
    disactivateCartButton() 
  }
}

</script>