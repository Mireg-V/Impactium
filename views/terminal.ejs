<style>
:root {
  --white: #e8e8e8;
  --black: #212121;
}
.terminal {
  width: calc(100vw - 0px);
  height: calc(100vh - 100px);
  padding: 10px 0 0 0;
  margin-top: 80px;
  overflow: hidden;
}
.terminal .mode-chooser {
  margin-left: 5vw;
  background: #e8e8e822;
  backdrop-filter: blur(15px);
  border: 1px solid #e8e8e888;
  border-radius: 12px;
  min-height: 38px;
  width: unset;
  padding: 6px 6px;
  position: relative;
}
.terminal .mode-chooser p { 
  cursor: pointer;
  color: #e8e8e8;
  font-weight: 700;
  text-align: center;
  padding: 0px 6px;
  transition: all 0.5s ease;
  font-size: 14px;
}
.terminal .active-state {
  border-radius: 6px;
  background: #e8e8e8;
  height: 38px;
  position: absolute;
  transition: all 0.5s ease;
  z-index: 1;
  width: 3;
}
.choose-texts {
  z-index: 2;
}
.panel-wrapper {
  margin-top: 10px;
  position: relative;
  width: 90vw;
  left: 50%;
  transform: translateX(-50%);
  justify-content: space-between;
  
}
.panel {
  position: absolute;
  display: inline-flex;
  min-width: calc(90vw - 20px);
  height: calc(100vh - 185px);
  padding: 10px;
  border: 1px solid #e8e8e822;
  backdrop-filter: blur(15px);
  border-radius: 10px 25px 25px 25px;
  transition: all 0.5s ease;
  top: 0;
}

.onleft,
.onright {
  margin: 0 2vw;
  border-radius: 25px;
}

.onleft {
  transform: translateX(-95vw);
}
.onright {
  transform: translateX(91vw);
}
.super-onleft {
  transform: translateX(-190vw);
  border-radius: 25px;
}
.super-onright {
  transform: translateX(182vw);
  border-radius: 25px;
}
.graph {
  padding: 10px;
  background: #e8e8e8;
  border-radius: 5px;
  grid-column: span 3;
  grid-row: span 2;
}
.graph.cta-rgr {
  grid-row: 3;
  grid-column: span 2;
}
.graph.dis-stat {
  grid-row: 3;
  grid-column: span 2;
}
#panel-1 {
  display: grid;
  gap: 10px;
  grid-template-columns: repeat(8, 1fr);
  grid-template-rows: repeat(4, 1fr);
}
#panel-0 {
  display: grid;
  gap: 10px;
  grid-template-columns: repeat(8, 1fr);
  grid-template-rows: repeat(8, 1fr);
}
.renev-perms {
  grid-column: span 1;
  grid-row: span 1;
}
.renev-perms button {
  width: 100%;
  height: 40px;
  flex-direction: row;
  background: var(--white);
  justify-content: space-between;
  border-radius: 5px;
}
.renev-perms p {
  flex: 1;
  text-align: center;
  font-weight: 700;
  font-size: 15px;
  color: var(--black);
}
.renev-perms img {
  transition: all 0.5s ease;
  height: 30px;
  width: 30px;
  margin: 5px 0 5px 10px;
}
.renev-perms button:hover img {
  transform: rotateZ(180deg);
}
.imposters {
  display: flex;
  flex-direction: column;
  grid-column: 1;
  grid-row: span 2;
  background: var(--white);
  border-radius: 5px;
}
.imposters .header {
  height: 40px;
  color: var(--black);
}
.imposters .header p {
  text-align: center;
  display: flex;
  align-items: center;
  font-weight: 700;
  font-size: 15px;
  color: var(--black);
}
.imposters .header img {
  height: 30px;
}
</style>
<div class="terminal">

  <div class="mode-chooser inflex">
    <div class="active-state"></div>
    <div class="choose-texts center-v flex-dir-row">
      <p onclick="changeState(0, this)">Управление</p>
      <p onclick="changeState(1, this)">Статистика</p>
      <p onclick="changeState(2, this)">Блокировки</p>
    </div>
  </div>
  <div class="panel-wrapper center">
    <div class="panel" id="panel-0"> <!-- Управление -->
      <div class="renev-perms center">
        <button onclick="renewPerms(true)" class="center">
          <img src="https://api.impactium.fun/static/img/svg/sots.svg">
          <p>Обновить права</p>
        </button>
      </div>
      <div class="imposters">
        <div class="header flex-dir-row center">
          <img src="https://api.impactium.fun/static/img/svg/amogus.svg">
          <p>Список амогусов</p>
        </div>
        <div class="imposters-list">
          
        </div>
      </div>
    </div>
    <div class="panel onright" id="panel-1"> <!-- Статистика -->
      <div class="visit graph">
        <canvas id="visitGraph"></canvas>
      </div>
      <div class="cta-rgr graph">
        <canvas id="ctaRgr"></canvas>
      </div>
      <div class="dis-stat graph">
        <canvas id="disStat"></canvas>
      </div>
    </div>
    <div class="panel super-onright" id="panel-2"> <!-- Блокировки -->
      gg
    </div>
  </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.5.1/chart.min.js"></script>

  <script>
    const rawData = JSON.parse('<%- JSON.stringify(statistics) %>');

    const last7Days = rawData.slice(-7);

    const labels = last7Days.map(entry => {
      const dateParts = entry.day.split('.');
      return `${dateParts[0]}.${dateParts[1]}`;
    });

    const mainWebJoinsData = rawData.map(entry => entry.stats.mainWebJoins);
    const guildsWebJoins = rawData.map(entry => entry.stats.guildsWebJoins);
    const langen = rawData.map(entry => entry.stats.langen);
    const langit = rawData.map(entry => entry.stats.langit);
    const langis = rawData.map(entry => entry.stats.langis);
    const languk = rawData.map(entry => entry.stats.languk);
    const langru = rawData.map(entry => entry.stats.langru);
    const discordBotSumbalComs = rawData.map(entry => entry.stats.discordBotSumbalComs);
    const discordBotAddbalComs = rawData.map(entry => entry.stats.discordBotAddbalComs);
    const discordBotRembalComs = rawData.map(entry => entry.stats.discordBotRembalComs);

    const ctxVisit = document.getElementById('visitGraph');
    const ctxCtaRgr = document.getElementById('ctaRgr');
    const disStat = document.getElementById('disStat');

    new Chart(ctxVisit, {
      type: 'line',
      data: {
        labels: labels,
        datasets: [{
          label: 'Main',
          data: mainWebJoinsData,
          borderWidth: 3,
          backgroundColor: 'rgba(0, 95, 255, 0.2)',
          borderColor: 'rgba(0, 95, 255, 0.6)',
          cubicInterpolationMode: 'monotone'
        },
        {
          label: 'Guilds',
          data: guildsWebJoins,
          borderWidth: 3,
          backgroundColor: 'rgba(125, 14, 0, 0.2)',
          borderColor: 'rgba(125, 14, 0, 0.6)',
          cubicInterpolationMode: 'monotone'
        }]
      },
      options: {
        scales: {
          y: {
            beginAtZero: false
          }
        },
        legend: {
          labels: {
            fontColor: 'black'
          }
        }
      }
    });

    new Chart(ctxCtaRgr, {
      type: 'line',
      data: {
        labels: labels,
        datasets: [{
          label: 'Lang EU',
          data: langen,
          borderWidth: 3,
          backgroundColor: 'rgba(0, 95, 255, 0.2)',
          borderColor: 'rgba(0, 95, 255, 0.6)',
          cubicInterpolationMode: 'monotone'
        },
        {
          label: 'Lang IT',
          data: langit,
          borderWidth: 3,
          backgroundColor: 'rgba(0, 213, 84, 0.2)',
          borderColor: 'rgba(0, 213, 84, 0.6)',
          cubicInterpolationMode: 'monotone'
        },
        {
          label: 'Lang IS',
          data: langis,
          borderWidth: 3,
          backgroundColor: 'rgba(255, 145, 255, 0.2)',
          borderColor: 'rgba(255, 145, 255, 0.6)',
          cubicInterpolationMode: 'monotone'
        },
        {
          label: 'Lang UA',
          data: languk,
          borderWidth: 3,
          backgroundColor: 'rgba(255, 213, 84, 0.2)',
          borderColor: 'rgba(255, 213, 84, 0.6)',
          cubicInterpolationMode: 'monotone'
        },
        {
          label: 'Lang RU',
          data: langru,
          borderWidth: 3,
          backgroundColor: 'rgba(255, 43, 14, 0.2)',
          borderColor: 'rgba(255, 43, 14, 0.6)',
          cubicInterpolationMode: 'monotone'
        }]
      },
      options: {
        scales: {
          y: {
            beginAtZero: true
          }
        },
        legend: {
          labels: {
            fontColor: 'black'
          }
        }
      }
    });

    new Chart(disStat, {
      type: 'line',
      data: {
        labels: labels,
        datasets: [{
          label: 'Guild Balance',
          data: discordBotSumbalComs,
          borderWidth: 3,
          backgroundColor: 'rgba(0, 95, 255, 0.2)',
          borderColor: 'rgba(0, 95, 255, 0.6)',
          cubicInterpolationMode: 'monotone'
        },
        {
          label: 'Add Money',
          data: discordBotAddbalComs,
          borderWidth: 3,
          backgroundColor: 'rgba(0, 213, 84, 0.2)',
          borderColor: 'rgba(0, 213, 84, 0.6)',
          cubicInterpolationMode: 'monotone'
        },
        {
          label: 'Remove Money',
          data: discordBotRembalComs,
          borderWidth: 3,
          backgroundColor: 'rgba(255, 213, 84, 0.2)',
          borderColor: 'rgba(255, 213, 84, 0.6)',
          cubicInterpolationMode: 'monotone'
        }]
      },
      options: {
        scales: {
          y: {
            beginAtZero: true
          }
        },
        legend: {
          labels: {
            fontColor: 'black'
          }
        }
      }
    });
  </script>
 


<script>
  function changeState(index, element, plus = 0) {
    const activeState = document.querySelector('.active-state');

    const sumWidth = Array.from(element.parentElement.children)
      .slice(0, index)
      .reduce((sum, child) => sum + child.offsetWidth, 0);

    const width = element.offsetWidth + plus;
    activeState.style.transform = `translateX(${sumWidth}px)`;
    activeState.style.width = `${width}px`;

    // Убираем стили у всех элементов
    const chooseTexts = document.querySelectorAll('.choose-texts p');
    chooseTexts.forEach(p => p.style.color = '');
    element.style.color = 'black'

    // Присваиваем стиль только нажатому элементу
    activatePanel(index, element, plus)
  }
  function activatePanel(selectedIndex) {
    const allPanels = document.querySelectorAll('.panel');
    allPanels.forEach(panel => {
      panel.classList.remove('onleft', 'onright', 'super-onleft', 'super-onright');
    });
    
    const prevIndex = (selectedIndex === 0) ? 2 : (selectedIndex - 1);
    const nextIndex = (selectedIndex === 2) ? 0 : (selectedIndex + 1);
    const prevPrevIndex = (prevIndex === 0) ? 2 : (prevIndex - 1);
    const nextNextIndex = (nextIndex === 2) ? 0 : (nextIndex + 1);
    
    const thisPanel = document.getElementById(`panel-${selectedIndex}`);
    const prevPanel = document.getElementById(`panel-${prevIndex}`);
    const nextPanel = document.getElementById(`panel-${nextIndex}`);
    const prevPrevPanel = document.getElementById(`panel-${prevPrevIndex}`);
    const nextNextPanel = document.getElementById(`panel-${nextNextIndex}`);
    
    if (selectedIndex === 0) {
      prevPrevPanel.classList.add('onright');
      prevPanel.classList.add('super-onright');
    } else if (selectedIndex === 1) {
      prevPanel.classList.add('onleft');
      nextPanel.classList.add('onright');
    } else if (selectedIndex === 2) {
      nextNextPanel.classList.add('onleft');
      nextPanel.classList.add('super-onleft');
    }
  }

  changeState(0, document.querySelector('.choose-texts p:nth-child(1)'), 3);

function renewPerms(by) {
  const data = {
    type: by
  };

  fetch('/terminal/renewPerms', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify(data)
  })
  .then(response => {
    if (response.ok) {
      return response.json(); 
    } else {
      throw new Error('Network response was not ok');
    }
  })
}

</script>